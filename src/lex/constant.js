const RESERVED_WORD =  {
    'break': 1,
    'delete': 1,
    'function': 1,
    'return': 1,
    'typeof': 1,
    'case': 1,
    'do': 1,
    'if': 1,
    'switch': 1,
    'var': 1,
    'catch': 1,
    'else': 1,
    'in': 1,
    'this': 1,
    'void': 1,
    'continue': 1,
    'false': 1,
    'instance': 1,
    'throw': 1,
    'while': 1,
    'debugger': 1,
    'finally': 1,
    'new': 1,
    'true': 1,
    'with': 1,
    'default': 1,
    'for': 1,
    'null': 1,
    'abstract': 1,
    'double': 1,
    'goto': 1,
    'native': 1,
    'static': 1,
    'boolean': 1,
    'enum': 1,
    'implements': 1,
    'package': 1,
    'super': 1,
    'byte': 1,
    'export': 1,
    'import': 1,
    'private': 1,
    'synchronized': 1,
    'char': 1,
    'extends': 1,
    'int': 1,
    'protected': 1,
    'throws': 1,
    'class': 1,
    'final': 1,
    'interface': 1,
    'public': 1,
    'transient': 1,
    'const': 1,
    'float': 1,
    'long': 1,
    'short': 1,
    'volatile' : 1
}

// token type
const TOKEN_TYPE = {
    reserved : 'reserved',
    identifier: 'identifier',
    number: 'number',
    string: 'string',
    comment: 'comment',
    regexp: 'regexp',
    punc: 'punc',
    endline: 'endline',
    end: 'end',
}

// 词法分析正则表达式

const tokenRegxp = /\s*([(){}\[.,:;'"~\?\]#@]|==?=?|\/(\*|\/)?|\*[\/]?|\+[+=]?|-[\-=]?|%=?|&[&=]?|\|[|=]?|>>?>?=?|<([\/=]|\!(\[|--)?|<=?)?|\^=?|\!=?=?|[a-zA-Z_$][a-zA-Z0-9_$]*|[0-9]+([xX][0-9a-fA-F]+|\.[0-9]*)?([eE][+\-]?[0-9]+)?)/g


// Token 表
const Token = {
    'FUNCTION': 'function',
    'SWITCH': 'switch',
    'TRY': 'try',
    'CATCH': 'catch',
    'FINALLY': 'finally',
    'THROW': 'throw',
    'VAR': 'var',
    'IF': 'if',
    'ELSE': 'else',
    'DO': 'do',
    'WHILE': 'while',
    'FOR': 'for',
    'WITH': 'with',
    'DEFAULT': 'default',
    'CASE': 'case',
    'IN': 'in',
    'BREAK': 'break',
    'CONTINUE': 'continue',
    'RETURN': 'return',

    'THIS': 'this',
    'FALSE': 'false',
    'TRUE': 'true',
    'NULL': 'null',
    'COMMA': ',',
    'SEMI': ';',
    'COLON': ':',
    'HOOK': '?',
    'NEW': 'new',
    'DOT': '.',

    'LP': '(',
    'RP': ')',
    'LB': '[',
    'RB': ']',
    'LC': '{',
    'RC': '}',

    'ASSIGN': '=',
    'ASSIGN_ADD': '+=',
    'ASSIGN_SUB': '-=',
    'ASSIGN_MUL': '*=',
    'ASSIGN_DIV': '/=',
    'ASSIGN_MOD': '%=',
    'ASSIGN_BITOR': '|=',
    'ASSIGN_BITXOR': '^=',
    'ASSIGN_BITAND': '&=',
    'ASSIGN_LSH': '<<=',
    'ASSIGN_RSH': '>>=',
    'ASSIGN_URSH': '>>>=',

    'OR': '||',
    'AND': '&&',

    'BITOR': '|',
    'BITXOR': '^',
    'BITAND': '&',
    'BITNOT': '~',

    'EQ': '==',
    'NE': '!=',
    'SHEQ': '===',
    'SHNE': '!==',

    'INSTANCEOF': 'instanceof',
    'IN': 'in',
    'LE': '<=',
    'LT': '<',
    'GE': '>=',
    'GT': '>',

    'LSH': '<<',
    'RSH': '>>',
    'URSH': '>>>',

    'ADD': '+',
    'SUB': '-',

    'MUL': '*',
    'DIV': '/',
    'MOD': '%',

    'INC': '++',
    'DEC': '--',
    'NOT': '!',
    'VOID': 'void',
    'TYPEOF': 'typeof',
    'DELPROP': 'delete',
}


exports = module.exports = {
    'RESERVED_WORD': RESERVED_WORD,
    'tokenRegxp': tokenRegxp,
    'TOKEN_TYPE': TOKEN_TYPE,
    'Token': Token,
}